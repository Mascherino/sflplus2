---
name: Lint Code & Build Docker Image

on: [push, pull_request]

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    lint:
        # Name the Job
        name: Lint Code Base
        # Set the agent to run on
        runs-on: ubuntu-latest

        ############################################
        # Grant status permission for MULTI_STATUS #
        ############################################
        permissions:
            contents: read
            packages: read
            statuses: write

        ##################
        # Load all steps #
        ##################
        steps:
            ##########################
            # Checkout the code base #
            ##########################
            - name: Checkout Code
              uses: actions/checkout@v3
              with:
                  # Full git history is needed to get a proper
                  # list of changed files within `super-linter`
                  fetch-depth: 0

            ################################
            # Run Linter against code base #
            ################################
            - name: Lint Code Base
              uses: super-linter/super-linter/slim@v5
              env:
                  VALIDATE_ALL_CODEBASE: true
                  VALIDATE_PYTHON_BLACK: false
                  VALIDATE_JSCPD: false
                  VALIDATE_PYTHON_PYLINT: false
                  VALIDATE_PYTHON_MYPY: false
                  VALIDATE_PYTHON_ISORT: false
                  VALIDATE_CSS: false
                  YAML_ERROR_ON_WARNING: true
                  DEFAULT_BRANCH: main
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    build:
        needs: lint
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
            - name: Docker meta
              id: meta
              uses: docker/metadata-action@v4
              with:
                  # list of Docker images to use as base name for tags
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  # generate Docker tags based on the following events/attributes
                  tags: |
                      type=ref,event=branch
                      type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            # Login against a Docker registry except on PR
            # https://github.com/docker/login-action
            - name: Log into registry ${{ env.REGISTRY }}
              if: github.event_name != 'pull_request'
              uses: docker/login-action@v2
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            # Build and push Docker image with Buildx (don't push on PR)
            # https://github.com/docker/build-push-action
            - name: Build and push Docker image
              id: build-and-push
              uses: docker/build-push-action@v4
              with:
                  context: .
                  push: ${{ github.event_name != 'pull_request' }}
                  file: ./Dockerfile
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
